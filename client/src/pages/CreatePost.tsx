// ----- Vue qui correspond à la création d'un post grâce à l'IA ----

// Import des Hooks
import { useState } from "react";
import { useNavigate } from "react-router";

import { preview } from "../assets";

// méthode pour générer un post aléatoire
import {  getRandomPrompt } from '../utils';
import { FormField, Loader } from "../components";

type FormData = {
  name: string,
  prompt: string,
  photo: string,
};

const INITAL_DATA:FormData = {
  name:'',
  prompt: '',
  photo: '',
};

// 2. on a state pour informer qu'une image est en cours de génération.
const CreatePost = () => {
  const navigate = useNavigate();

  const [form, setForm] = useState(INITAL_DATA);
  const [generatingImg, setGeneratingImg] = useState(false);
  const [loading, setLoading] = useState(false);

  // méthode qui appel la route pour générer une image avec l'IA
  const generateImg = async()=> {
    if(form.prompt) {

      try {
        setGeneratingImg(true);

        const response = await fetch(`http://localhost:8081/api/v1/dalle`,{
          method: 'POST',
          headers:{
            'content-type': 'application/json'
          },
          body: JSON.stringify({ prompt : form.prompt })
        });

        // on attend la réponse qu'on convertit en JSON
        const data = await response.json();

        setForm({...form, photo :`data:image/jpeg;base64,${data.photo}`})

      } catch (error) {

        alert(error);

      } finally {
        setGeneratingImg(false);
      };
    } else{
      alert("please enter a prompt")
    };
  };

  const handleSubmit = () => {

  };

  const handleChange = (e:any) => {
    // 
    setForm({...form, [e.target?.name]: e.target?.value})

  };

  // méthode qui permet de générer une nouvelle prompt, on passe la valeur courante du state
  //  pour s'assurer de ne pas tomber sur la même et avec le destructuring, on set le state avec la nouvelle prompt
  const handleSurpriseMe =() => {
    const randomPrompt = getRandomPrompt(form.prompt)
    setForm({...form, prompt: randomPrompt})
  };

  return (
    <section className="max-w-7xl mx-auto">

        <div>
            <h1 className="font-extrabold text-[#222328] text-[32px]">Create</h1>
            <p className="mt-2 text-[#666e75] text-[16px] max-x-[500px]">
                Create imaginative and visually stunning images generated by DALL-E AI
                and share them with your community
            </p>
        </div>

        <form
          className="mt-16 max-w-3xl"
          onSubmit={handleSubmit}
        >
          <div className="flex flex-col gap-5">
            <FormField 
              labelName="Your name"
              type="text"
              name="name"
              placeholder="John Doe"
              value={form.name}
              handleChange={handleChange}
            />
             <FormField 
              labelName="Prompt"
              type="text"
              name="prompt"
              placeholder="A plush toy robot sitting against a yellow wall"
              value={form.prompt}
              handleChange={handleChange}
              isSurpriseMe
              handleSurpriseMe={handleSurpriseMe}
            />

            <div className="relative bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg
              focus:ring-blue-500 focus:border-blue-500 w-64 p-3 h-64 flex justify-center items-center"
            >
              {form.photo? (
                <img 
                  src={form.photo} 
                  alt={form.prompt}
                  className="w-full h-full object-contain" 
                />
               ) : (
                <img 
                  src={preview} 
                  alt="preview" 
                  className="w-9/12 h-9/12 object-contain opacity-40"
                />
              )}

              {generatingImg && (
                <div className="absolute inset-0 z-0 flex justify-center items-center bg-[rgba(0,0,0,0.5)] rounded-lg">
                  <Loader />
                </div>
              )}

            </div>
          </div>

          <div className="mt-5 flex gap-5">
              <button
                onClick={generateImg}
                type="button"
                className="w-full sm:w-auto px-5 py-2.5 bg-green-700 text-white font-medium rounded-md text-sm text-center"
              >
                {generatingImg? 'Generating...': 'Generate'}
              </button>
          </div>

          <div className="mt-10">
              <p className="mt-2 text-[#666e75] text-[14px]">
                Once you have created the imahge you want, you can share it with others in the community
              </p>
              <button
                type="submit"
                className="mt-3 text-white bg-[#6469ff] text-center font-medium rounded-md text-sm w-full sm:w-auto px-5 py-2.5"
              >
                {loading? 'Sharring...':'Share with the community'}
              </button>
          </div>
        </form>

    </section>
  )
}

export default CreatePost